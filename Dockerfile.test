# Take in a runtime image to use for the base system
# Expects an alpine image
ARG RUNTIME_IMAGE

# Use the docker image provided via build arg
FROM $RUNTIME_IMAGE

# Install the libraries we need for go and dockerize
RUN apk add --no-cache curl git

# Copy in the dockerize utility
ARG DOCKERIZE_VERSION=0.6.0
RUN curl -sL https://github.com/jwilder/dockerize/releases/download/v$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-v$DOCKERIZE_VERSION.tar.gz | tar -xzC /usr/local/bin

# Copy project into the image
COPY . /var/lib/go/src/github.com/fauna/faunadb-go

# Shift over to the project, set GOPATH, and fetch dependencies
WORKDIR /var/lib/go/src/github.com/fauna/faunadb-go/faunadb
ENV GOPATH=/var/lib/go
RUN go get -t -v

# Define the default variables for the tests
ENV FAUNA_ROOT_KEY=secret FAUNA_ENDPOINT=https://db.fauna.com

# Run the tests (after target database is up)
ENTRYPOINT dockerize -wait "$FAUNA_ENDPOINT/ping" -timeout 30s go test -v
